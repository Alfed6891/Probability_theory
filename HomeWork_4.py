# Случайная непрерывная величина A имеет равномерное распределение на промежутке (200, 800].
# Найдите ее среднее значение и дисперсию.

def mean_and_variance(a,b):
    return f'В промежутке ({a};{b}]\nСреднее значение: М(А) = {(a+b)/2: .2f}\nДисперсия: D(A) = {((b-a)**2)/12: .2f}'

print(mean_and_variance(200,800))



# О случайной непрерывной равномерно распределенной величине B известно, что ее дисперсия равна 0.2.
# Можно ли найти правую границу величины B и ее среднее значение зная, что левая граница равна 0.5?
# Если да, найдите ее.

b=0.5+2.4**(1/2)
print(f'Левая граница распределения величины В - b = {b: .3f}\n'
      f'Среднее значение В на промежутке (0.5; {b: .3f}) M(B) = {(b+0.5)/2: .3f}'     
     )



# Непрерывная случайная величина X распределена нормально и задана плотностью распределения
# f(x) = (1 / (4 * sqrt(2pi))) * exp((-(x+2)**2) / 32)
# Найдите:
# а). M(X)
# б). D(X)
# в). std(X) (среднее квадратичное отклонение)




# Рост взрослого населения города X имеет нормальное распределение.
# Причем, средний рост равен 174 см, а среднее квадратичное отклонение равно 8 см.
# Какова вероятность того, что случайным образом выбранный взрослый человек имеет рост:
# а). больше 182 см
# б). больше 190 см
# в). от 166 см до 190 см
# г). от 166 см до 182 см
# д). от 158 см до 190 см
# е). не выше 150 см или не ниже 190 см
# ё). не выше 150 см или не ниже 198 см
# ж). ниже 166 см.

def z_value(height):
    return (height-174)/8

from statistics import NormalDist 
# возвращает новый объект NormalDist где mu представляет собой среднее арифметическое данных,
# а sigma представляет собой среднее квадратическое отклонение. 
# метод cdf определяет вероятность того, что случайная величина X будет меньше или равна x
# Метод ndist.cdf() - является аналогом Z-таблиц


P=1-NormalDist().cdf(z_value(182))
print(f'Вероятность при росте 182 равна: {P:.4f}')

P=1-NormalDist().cdf(z_value(190))
print(f'Вероятность при росте 190 равна: {P:.4f}')

P=NormalDist().cdf(z_value(190))-NormalDist().cdf(z_value(166))
print(f'Вероятность при росте от 166 до 190 равна: {P:.4f}')

P=NormalDist().cdf(z_value(182))-NormalDist().cdf(z_value(166))
print(f'Вероятность при росте от 166 до 182 равна: {P:.4f}')

P=NormalDist().cdf(z_value(190))-NormalDist().cdf(z_value(158))
print(f'Вероятность при росте от 158 до 190 равна: {P:.4f}')

P=NormalDist().cdf(z_value(150))+(1-NormalDist().cdf(z_value(190)))
print(f'Вероятность при росте не выше 150 см или не ниже 190 см равна: {P:.4f}')

P=NormalDist().cdf(z_value(150))+(1-NormalDist().cdf(z_value(198)))
print(f'Вероятность при росте не выше 150 см или не ниже 198 см равна: {P:.4f}')

P=NormalDist().cdf(z_value(166))
print(f'Вероятность при росте ниже 166 равна: {P:.4f}')



# На сколько сигм (средних квадратичных отклонений) отклоняется рост человека, 
# равный 190 см, от математического ожидания роста в популяции,
# в которой M(X) = 178 см и D(X) = 25 кв.см?

Z=(190-178)/25**(1/2)
print(f'Рост человека, равный 190 см, отклоняется от математического ожидания роста в популяции, \n'
      f'в которой M(X) = 178 см и D(X) = 25 кв.см на Z = {Z} сигм.')