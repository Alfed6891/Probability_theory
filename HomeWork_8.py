import numpy as np
import scipy.stats as stats


# 1) Даны значения величины заработной платы заемщиков банка (zp) 
# и значения их поведенческого кредитного скоринга (ks):
zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])

# Найдите ковариацию этих двух величин с помощью элементарных действий, 
cov = np.mean(zp*ks) - np.mean(zp) * np.mean(ks)
print(f'{cov: .2f}')

# а затем с помощью функции cov из numpy
print(np.cov(zp, ks, ddof=0))

# Полученные значения должны быть равны.
'''
9157.839999999997
[[ 3494.64  9157.84]
 [ 9157.84 30468.89]]
'''

# Найдите коэффициент корреляции Пирсона с помощью ковариации и 
# среднеквадратичных отклонений двух признаков, а затем с использованием 
# функций из библиотек numpy и pandas.

print(f'Коэффициент кореляции Пирсона: {9157.84/(np.std(zp,ddof=0) * np.std(ks,ddof=0)): .2f}')
# print (np.corrcoef(zp,ks))



# 2) Измерены значения IQ выборки студентов,
# обучающихся в местных технических вузах:
# 131, 125, 115, 122, 131, 115, 107, 99, 125, 111.
# Известно, что в генеральной совокупности IQ распределен нормально.
# Найдите доверительный интервал для математического ожидания с надежностью 0.95.

from scipy.stats import t
a = np.array([131, 125, 115, 122, 131, 115, 107, 99, 125, 111])
x_1 = np.mean(a)
D_1=np.var(a, ddof=1)
t_1 = t.ppf(0.975, 9)

print (f'Доверительный интервал {x_1 - t_1 * np.sqrt(D_1/10): .2f} - {x_1 + t_1 * np.sqrt(D_1/10): .2f}\
       с вероятностью 95 % захватит истинное математическое ожидание.')

# 3) Известно, что рост футболистов в сборной распределен нормально с 
# дисперсией генеральной совокупности, равной 25 кв.см. Объем выборки равен 27,
# среднее выборочное составляет 174.2. Найдите доверительный интервал для
# математического ожидания с надежностью 0.95.

z = 1.96
n = 27
D_3 = 25
x = 174.2

print (f'Доверительный интервал {x - (z * (D_3**0.5/n**0.5)): .2f} - {x + (z * (D_3**0.5/n**0.5)): .2f}\
       с вероятностью 95 % захватит истинное математическое ожидание.')